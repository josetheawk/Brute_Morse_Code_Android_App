#!/usr/bin/env sh

set -e

##############################################################################
##
##  Gradle start up script for POSIX generated by Gradle.
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_HOME="$(cd "$(dirname "$0")"; pwd -P)"
APP_NAME="Gradle"

WRAPPER_VERSION="8.9"
WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
WRAPPER_DIST_URLS="https://services.gradle.org/distributions/gradle-${WRAPPER_VERSION}-all.zip https://downloads.gradle.org/distributions/gradle-${WRAPPER_VERSION}-all.zip"

log() {
    printf '%s\n' "$*"
}

die() {
    log "ERROR: $*" >&2
    exit 1
}

fetch_distribution() {
    url="$1"
    dest="$2"
    if command -v curl >/dev/null 2>&1; then
        curl -fL --retry 3 --retry-delay 2 "$url" -o "$dest"
        return $?
    elif command -v wget >/dev/null 2>&1; then
        wget -q "$url" -O "$dest"
        return $?
    fi
    return 127
}

ensure_wrapper_jar() {
    if [ -f "$WRAPPER_JAR" ]; then
        return 0
    fi

    log "Gradle wrapper JAR not found; attempting to download ${WRAPPER_VERSION} distribution..."

    TMP_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t gradlew)"
    TMP_ZIP="$TMP_DIR/gradle.zip"

    have_downloader=false
    for url in $WRAPPER_DIST_URLS; do
        if fetch_distribution "$url" "$TMP_ZIP"; then
            have_downloader=true
            break
        else
            log "Failed to download from $url"
        fi
    done

    if [ "$have_downloader" = false ]; then
        rm -rf "$TMP_DIR"
        die "Unable to download Gradle wrapper - install curl or wget, or check network access"
    fi

    python3 - "$TMP_ZIP" "$WRAPPER_JAR" "$WRAPPER_VERSION" <<'PY' || {
import os
import sys
import zipfile

zip_path, jar_path, version = sys.argv[1:]
entry_name = f"gradle-{version}/lib/gradle-wrapper-{version}.jar"
with zipfile.ZipFile(zip_path) as archive:
    try:
        with archive.open(entry_name) as src, open(jar_path, "wb") as dst:
            dst.write(src.read())
    except KeyError as exc:
        raise SystemExit(f"Missing {entry_name} in {zip_path}: {exc}")
os.chmod(jar_path, 0o644)
PY
        rm -rf "$TMP_DIR"
        die "Failed to extract Gradle wrapper JAR"
    }

    rm -rf "$TMP_DIR"
    log "Gradle wrapper JAR downloaded to $WRAPPER_JAR"
}

ensure_wrapper_jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "JAVA_HOME is set to an invalid directory: $JAVA_HOME"
    fi
else
    JAVACMD="java"
fi

exec "$JAVACMD" ${JAVA_OPTS} ${GRADLE_OPTS} -classpath "$WRAPPER_JAR" org.gradle.wrapper.GradleWrapperMain "$@"
